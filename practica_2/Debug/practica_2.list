
practica_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022dc  080022dc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080022dc  080022dc  000032dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022e4  080022e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e4  080022e4  000032e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e8  080022e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080022f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080022f8  00004070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cf8  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f6  00000000  00000000  0000bd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050d  00000000  00000000  0000d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201e7  00000000  00000000  0000ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad3  00000000  00000000  0002dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c457a  00000000  00000000  00036a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a08  00000000  00000000  000fb04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000fca54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002294 	.word	0x08002294

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002294 	.word	0x08002294

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fab7 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f87b 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f911 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f8e5 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  delay_t delayLed;			/*Se crea la variable que contiene los parametros del delay*/

  blinkPattern_t blinkPattern[] = {
 8000546:	4b39      	ldr	r3, [pc, #228]	@ (800062c <main+0xfc>)
 8000548:	463c      	mov	r4, r7
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000554:	e884 0003 	stmia.w	r4, {r0, r1}
      {1000, MAX_REPEAT},   // 5 veces con período 1s
      {200,  MAX_REPEAT},   // 5 veces con período 200ms
      {100,  MAX_REPEAT}    // 5 veces con período 100ms
  };

  uint8_t patternIndex = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t repeatCount = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  bool ledState = false;
 8000564:	2300      	movs	r3, #0
 8000566:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  delayInit(&delayLed, (tick_t)(blinkPattern[patternIndex].period / 2)); /*Para inicializar el delay con 50% ciclo util.*/
 800056a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	3328      	adds	r3, #40	@ 0x28
 8000572:	443b      	add	r3, r7
 8000574:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000578:	085a      	lsrs	r2, r3, #1
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f95d 	bl	8000840 <delayInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(delayRead(&delayLed)){
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f970 	bl	8000870 <delayRead>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f7      	beq.n	8000586 <main+0x56>
		  ledState = !ledState;
 8000596:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf14      	ite	ne
 800059e:	2301      	movne	r3, #1
 80005a0:	2300      	moveq	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f083 0301 	eor.w	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80005ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ba:	2120      	movs	r1, #32
 80005bc:	481c      	ldr	r0, [pc, #112]	@ (8000630 <main+0x100>)
 80005be:	f000 fd78 	bl	80010b2 <HAL_GPIO_TogglePin>
		  delayWrite(&delayLed, (tick_t)(blinkPattern[patternIndex].period / 2)); /*Para actualizar el delay con 50% ciclo util.*/
 80005c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	3328      	adds	r3, #40	@ 0x28
 80005ca:	443b      	add	r3, r7
 80005cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80005d0:	085a      	lsrs	r2, r3, #1
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f971 	bl	80008c0 <delayWrite>
          if (!ledState) {
 80005de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0cc      	beq.n	8000586 <main+0x56>
              repeatCount++;
 80005ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80005f0:	3301      	adds	r3, #1
 80005f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
              if (repeatCount >= blinkPattern[patternIndex].repeats) {
 80005f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	3328      	adds	r3, #40	@ 0x28
 80005fe:	443b      	add	r3, r7
 8000600:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000604:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000608:	429a      	cmp	r2, r3
 800060a:	d3bc      	bcc.n	8000586 <main+0x56>
                  repeatCount = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                  patternIndex++;
 8000612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000616:	3301      	adds	r3, #1
 8000618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                  if (patternIndex >= (sizeof(blinkPattern)/sizeof(blinkPattern[0]))) {
 800061c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000620:	2b02      	cmp	r3, #2
 8000622:	d9b0      	bls.n	8000586 <main+0x56>
                      patternIndex = 0;  // reinicia patrón
 8000624:	2300      	movs	r3, #0
 8000626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if(delayRead(&delayLed)){
 800062a:	e7ac      	b.n	8000586 <main+0x56>
 800062c:	080022ac 	.word	0x080022ac
 8000630:	40020000 	.word	0x40020000

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	@ 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fdfa 	bl	800223c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <SystemClock_Config+0xd4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemClock_Config+0xd8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f85a 	bl	800177c <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ce:	f000 f908 	bl	80008e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fcfa 	bl	80010e8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fa:	f000 f8f2 	bl	80008e2 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fab6 	bl	8001cb8 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8c6 	bl	80008e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	4812      	ldr	r0, [pc, #72]	@ (8000838 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 fc46 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_GPIO_Init+0xd8>)
 800080c:	f000 faa4 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000810:	2320      	movs	r3, #32
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fa96 	bl	8000d58 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020800 	.word	0x40020800

08000840 <delayInit>:
 *@param delay_t* delay: puntero a struct delay_t.
 *@param tick_t duration: uint32 duración del delay en ms.
 *@retval None
 * */
void delayInit(delay_t * delay, tick_t duration)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	if(delay == NULL) return;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d009      	beq.n	8000864 <delayInit+0x24>
	delay->duration = duration;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	721a      	strb	r2, [r3, #8]
	delay->startTime = (tick_t)(0);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e000      	b.n	8000866 <delayInit+0x26>
	if(delay == NULL) return;
 8000864:	bf00      	nop
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <delayRead>:
 *@brief Función para revisar el tiempo transcurrido del retardo.
 *@param delay_t* delay: puntero a struct delay_t
 *@retval True, si el el tiempo ya se cumplió
 *@retval False, para cualquier otro caso*/
bool_t delayRead(delay_t * delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if(!delay->running){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d008      	beq.n	8000898 <delayRead+0x28>
		delay->startTime = (tick_t)(HAL_GetTick());
 8000886:	f000 f975 	bl	8000b74 <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	721a      	strb	r2, [r3, #8]
 8000896:	e00e      	b.n	80008b6 <delayRead+0x46>
	}else{
		if(((tick_t)(HAL_GetTick()) - delay->startTime) >= delay->duration){
 8000898:	f000 f96c 	bl	8000b74 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d304      	bcc.n	80008b6 <delayRead+0x46>
			delay->running = false;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	721a      	strb	r2, [r3, #8]
			return true;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <delayRead+0x48>
		}
	}

	return false;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <delayWrite>:
 *@brief Función para cambiar el valor de la duración del delay
 *@param delay_t* delay: puntero a struct delay_t
 *@param tick_t duration: uint32 duración del delay en ms.
 *@retval None*/
void delayWrite(delay_t * delay, tick_t duration)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	721a      	strb	r2, [r3, #8]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e6:	b672      	cpsid	i
}
 80008e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ea:	bf00      	nop
 80008ec:	e7fd      	b.n	80008ea <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	@ (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092e:	2007      	movs	r0, #7
 8000930:	f000 f9de 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 f9cf 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f891 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	@ (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	@ (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 fbe3 	bl	800224c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd53 	bl	8000530 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	080022ec 	.word	0x080022ec
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	20000070 	.word	0x20000070

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f90d 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff ff08 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f917 	bl	8000d3e <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f8ed 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	2000006c 	.word	0x2000006c

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000006c 	.word	0x2000006c

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	@ 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff47 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5c 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e165      	b.n	8001040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8154 	bne.w	800103a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ae 	beq.w	800103a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b5a      	ldr	r3, [pc, #360]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a58      	ldr	r2, [pc, #352]	@ (800105c <HAL_GPIO_Init+0x304>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	@ (8001060 <HAL_GPIO_Init+0x308>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	@ (8001064 <HAL_GPIO_Init+0x30c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	@ (8001068 <HAL_GPIO_Init+0x310>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	@ (800106c <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	@ (8001070 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	@ (8001074 <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x206>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	@ (8001078 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	@ (800105c <HAL_GPIO_Init+0x304>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a31      	ldr	r2, [pc, #196]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a26      	ldr	r2, [pc, #152]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_GPIO_Init+0x324>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a11      	ldr	r2, [pc, #68]	@ (800107c <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f ae96 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b68      	ldr	r3, [pc, #416]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d90c      	bls.n	8001124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b65      	ldr	r3, [pc, #404]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800115e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d044      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b3f      	ldr	r3, [pc, #252]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e067      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4934      	ldr	r1, [pc, #208]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fccc 	bl	8000b74 <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fcc8 	bl	8000b74 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d20c      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f855 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fc2c 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	40023800 	.word	0x40023800
 80012a8:	080022c4 	.word	0x080022c4
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4903      	ldr	r1, [pc, #12]	@ (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080022d4 	.word	0x080022d4

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f8:	f7ff ffdc 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	@ (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	080022d4 	.word	0x080022d4

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001320:	b0ae      	sub	sp, #184	@ 0xb8
 8001322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001342:	4bcb      	ldr	r3, [pc, #812]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b0c      	cmp	r3, #12
 800134c:	f200 8206 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x440>
 8001350:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	0800138d 	.word	0x0800138d
 800135c:	0800175d 	.word	0x0800175d
 8001360:	0800175d 	.word	0x0800175d
 8001364:	0800175d 	.word	0x0800175d
 8001368:	08001395 	.word	0x08001395
 800136c:	0800175d 	.word	0x0800175d
 8001370:	0800175d 	.word	0x0800175d
 8001374:	0800175d 	.word	0x0800175d
 8001378:	0800139d 	.word	0x0800139d
 800137c:	0800175d 	.word	0x0800175d
 8001380:	0800175d 	.word	0x0800175d
 8001384:	0800175d 	.word	0x0800175d
 8001388:	0800158d 	.word	0x0800158d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4bb9      	ldr	r3, [pc, #740]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x358>)
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001392:	e1e7      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001394:	4bb8      	ldr	r3, [pc, #736]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800139a:	e1e3      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139c:	4bb4      	ldr	r3, [pc, #720]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d071      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b4:	4bae      	ldr	r3, [pc, #696]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013da:	4622      	mov	r2, r4
 80013dc:	462b      	mov	r3, r5
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	0159      	lsls	r1, r3, #5
 80013e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ec:	0150      	lsls	r0, r2, #5
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4621      	mov	r1, r4
 80013f4:	1a51      	subs	r1, r2, r1
 80013f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80013f8:	4629      	mov	r1, r5
 80013fa:	eb63 0301 	sbc.w	r3, r3, r1
 80013fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800140c:	4649      	mov	r1, r9
 800140e:	018b      	lsls	r3, r1, #6
 8001410:	4641      	mov	r1, r8
 8001412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001416:	4641      	mov	r1, r8
 8001418:	018a      	lsls	r2, r1, #6
 800141a:	4641      	mov	r1, r8
 800141c:	1a51      	subs	r1, r2, r1
 800141e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001420:	4649      	mov	r1, r9
 8001422:	eb63 0301 	sbc.w	r3, r3, r1
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001434:	4649      	mov	r1, r9
 8001436:	00cb      	lsls	r3, r1, #3
 8001438:	4641      	mov	r1, r8
 800143a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800143e:	4641      	mov	r1, r8
 8001440:	00ca      	lsls	r2, r1, #3
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	4603      	mov	r3, r0
 8001448:	4622      	mov	r2, r4
 800144a:	189b      	adds	r3, r3, r2
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
 800144e:	462b      	mov	r3, r5
 8001450:	460a      	mov	r2, r1
 8001452:	eb42 0303 	adc.w	r3, r2, r3
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001464:	4629      	mov	r1, r5
 8001466:	024b      	lsls	r3, r1, #9
 8001468:	4621      	mov	r1, r4
 800146a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800146e:	4621      	mov	r1, r4
 8001470:	024a      	lsls	r2, r1, #9
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800147a:	2200      	movs	r2, #0
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001488:	f7fe febc 	bl	8000204 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001496:	e067      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014b2:	2300      	movs	r3, #0
 80014b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ba:	4622      	mov	r2, r4
 80014bc:	462b      	mov	r3, r5
 80014be:	f04f 0000 	mov.w	r0, #0
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	0159      	lsls	r1, r3, #5
 80014c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014cc:	0150      	lsls	r0, r2, #5
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4621      	mov	r1, r4
 80014d4:	1a51      	subs	r1, r2, r1
 80014d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014d8:	4629      	mov	r1, r5
 80014da:	eb63 0301 	sbc.w	r3, r3, r1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014ec:	4649      	mov	r1, r9
 80014ee:	018b      	lsls	r3, r1, #6
 80014f0:	4641      	mov	r1, r8
 80014f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f6:	4641      	mov	r1, r8
 80014f8:	018a      	lsls	r2, r1, #6
 80014fa:	4641      	mov	r1, r8
 80014fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001500:	4649      	mov	r1, r9
 8001502:	eb63 0b01 	sbc.w	fp, r3, r1
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800151a:	4692      	mov	sl, r2
 800151c:	469b      	mov	fp, r3
 800151e:	4623      	mov	r3, r4
 8001520:	eb1a 0303 	adds.w	r3, sl, r3
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	462b      	mov	r3, r5
 8001528:	eb4b 0303 	adc.w	r3, fp, r3
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800153a:	4629      	mov	r1, r5
 800153c:	028b      	lsls	r3, r1, #10
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001544:	4621      	mov	r1, r4
 8001546:	028a      	lsls	r2, r1, #10
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001550:	2200      	movs	r2, #0
 8001552:	673b      	str	r3, [r7, #112]	@ 0x70
 8001554:	677a      	str	r2, [r7, #116]	@ 0x74
 8001556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800155a:	f7fe fe53 	bl	8000204 <__aeabi_uldivmod>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4613      	mov	r3, r2
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001568:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	3301      	adds	r3, #1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800157a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800157e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e0eb      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d06b      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b8:	2300      	movs	r3, #0
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80015bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015c0:	4622      	mov	r2, r4
 80015c2:	462b      	mov	r3, r5
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0159      	lsls	r1, r3, #5
 80015ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d2:	0150      	lsls	r0, r2, #5
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4621      	mov	r1, r4
 80015da:	1a51      	subs	r1, r2, r1
 80015dc:	61b9      	str	r1, [r7, #24]
 80015de:	4629      	mov	r1, r5
 80015e0:	eb63 0301 	sbc.w	r3, r3, r1
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015f2:	4659      	mov	r1, fp
 80015f4:	018b      	lsls	r3, r1, #6
 80015f6:	4651      	mov	r1, sl
 80015f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fc:	4651      	mov	r1, sl
 80015fe:	018a      	lsls	r2, r1, #6
 8001600:	4651      	mov	r1, sl
 8001602:	ebb2 0801 	subs.w	r8, r2, r1
 8001606:	4659      	mov	r1, fp
 8001608:	eb63 0901 	sbc.w	r9, r3, r1
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800161c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001620:	4690      	mov	r8, r2
 8001622:	4699      	mov	r9, r3
 8001624:	4623      	mov	r3, r4
 8001626:	eb18 0303 	adds.w	r3, r8, r3
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	462b      	mov	r3, r5
 800162e:	eb49 0303 	adc.w	r3, r9, r3
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001640:	4629      	mov	r1, r5
 8001642:	024b      	lsls	r3, r1, #9
 8001644:	4621      	mov	r1, r4
 8001646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164a:	4621      	mov	r1, r4
 800164c:	024a      	lsls	r2, r1, #9
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001656:	2200      	movs	r2, #0
 8001658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800165a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800165c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001660:	f7fe fdd0 	bl	8000204 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	e065      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x420>
 8001670:	40023800 	.word	0x40023800
 8001674:	00f42400 	.word	0x00f42400
 8001678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	4618      	mov	r0, r3
 8001686:	4611      	mov	r1, r2
 8001688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800168c:	653b      	str	r3, [r7, #80]	@ 0x50
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	@ 0x54
 8001692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001696:	4642      	mov	r2, r8
 8001698:	464b      	mov	r3, r9
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	0159      	lsls	r1, r3, #5
 80016a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a8:	0150      	lsls	r0, r2, #5
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4641      	mov	r1, r8
 80016b0:	1a51      	subs	r1, r2, r1
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016c8:	4659      	mov	r1, fp
 80016ca:	018b      	lsls	r3, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d2:	4651      	mov	r1, sl
 80016d4:	018a      	lsls	r2, r1, #6
 80016d6:	4651      	mov	r1, sl
 80016d8:	1a54      	subs	r4, r2, r1
 80016da:	4659      	mov	r1, fp
 80016dc:	eb63 0501 	sbc.w	r5, r3, r1
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	00eb      	lsls	r3, r5, #3
 80016ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ee:	00e2      	lsls	r2, r4, #3
 80016f0:	4614      	mov	r4, r2
 80016f2:	461d      	mov	r5, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	18e3      	adds	r3, r4, r3
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	464b      	mov	r3, r9
 80016fc:	eb45 0303 	adc.w	r3, r5, r3
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800170e:	4629      	mov	r1, r5
 8001710:	028b      	lsls	r3, r1, #10
 8001712:	4621      	mov	r1, r4
 8001714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001718:	4621      	mov	r1, r4
 800171a:	028a      	lsls	r2, r1, #10
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001724:	2200      	movs	r2, #0
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001728:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800172a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800172e:	f7fe fd69 	bl	8000204 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0f1b      	lsrs	r3, r3, #28
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800174a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800174e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800175a:	e003      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001768:	4618      	mov	r0, r3
 800176a:	37b8      	adds	r7, #184	@ 0xb8
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400

0800177c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e28d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8083 	beq.w	80018a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800179c:	4b94      	ldr	r3, [pc, #592]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017a8:	4b91      	ldr	r3, [pc, #580]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017b4:	4b8e      	ldr	r3, [pc, #568]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b88      	ldr	r3, [pc, #544]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b84      	ldr	r3, [pc, #528]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x124>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d157      	bne.n	80018a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e25a      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x90>
 80017fe:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7b      	ldr	r2, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xb4>
 8001816:	4b76      	ldr	r3, [pc, #472]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a75      	ldr	r2, [pc, #468]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b73      	ldr	r3, [pc, #460]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a72      	ldr	r2, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 8001830:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b6c      	ldr	r3, [pc, #432]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f990 	bl	8000b74 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f98c 	bl	8000b74 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e21f      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b61      	ldr	r3, [pc, #388]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xdc>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f97c 	bl	8000b74 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f978 	bl	8000b74 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e20b      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x104>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06f      	beq.n	800198e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ae:	4b50      	ldr	r3, [pc, #320]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d017      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ba:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018de:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1d3      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4937      	ldr	r1, [pc, #220]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f925 	bl	8000b74 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff f921 	bl	8000b74 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1b4      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4925      	ldr	r1, [pc, #148]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f904 	bl	8000b74 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff f900 	bl	8000b74 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e193      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d036      	beq.n	8001a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d016      	beq.n	80019d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f8e4 	bl	8000b74 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff f8e0 	bl	8000b74 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e173      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x234>
 80019ce:	e01b      	b.n	8001a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f8cd 	bl	8000b74 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	e00e      	b.n	80019fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f8c9 	bl	8000b74 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d907      	bls.n	80019fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e15c      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470000 	.word	0x42470000
 80019f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ea      	bne.n	80019de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8097 	beq.w	8001b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b79      	ldr	r3, [pc, #484]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b76      	ldr	r3, [pc, #472]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f889 	bl	8000b74 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7ff f885 	bl	8000b74 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e118      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b6c      	ldr	r3, [pc, #432]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x31e>
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x340>
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001abc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac8:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001acc:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f023 0304 	bic.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f84a 	bl	8000b74 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f846 	bl	8000b74 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0d7      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ee      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x368>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f834 	bl	8000b74 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f830 	bl	8000b74 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0c1      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ad 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d060      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d145      	bne.n	8001bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f804 	bl	8000b74 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f800 	bl	8000b74 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e093      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffd5 	bl	8000b74 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ffd1 	bl	8000b74 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e064      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x452>
 8001bec:	e05c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ffbe 	bl	8000b74 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ffba 	bl	8000b74 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x480>
 8001c1a:	e045      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e040      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_RCC_OscConfig+0x538>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d129      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d122      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d119      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10f      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e03f      	b.n	8001d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fe2e 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f829 	bl	8001d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b0c0      	sub	sp, #256	@ 0x100
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	ea40 0301 	orr.w	r3, r0, r1
 8001d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001dac:	f021 010c 	bic.w	r1, r1, #12
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dce:	6999      	ldr	r1, [r3, #24]
 8001dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	ea40 0301 	orr.w	r3, r0, r1
 8001dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b8f      	ldr	r3, [pc, #572]	@ (8002020 <UART_SetConfig+0x2cc>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d005      	beq.n	8001df4 <UART_SetConfig+0xa0>
 8001de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b8d      	ldr	r3, [pc, #564]	@ (8002024 <UART_SetConfig+0x2d0>)
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d104      	bne.n	8001dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001df4:	f7ff fa7e 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8001df8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001dfc:	e003      	b.n	8001e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dfe:	f7ff fa65 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8001e02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e10:	f040 810c 	bne.w	800202c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	1891      	adds	r1, r2, r2
 8001e2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e2e:	415b      	adcs	r3, r3
 8001e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e36:	4621      	mov	r1, r4
 8001e38:	eb12 0801 	adds.w	r8, r2, r1
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	eb43 0901 	adc.w	r9, r3, r1
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e56:	4690      	mov	r8, r2
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	eb18 0303 	adds.w	r3, r8, r3
 8001e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e64:	462b      	mov	r3, r5
 8001e66:	eb49 0303 	adc.w	r3, r9, r3
 8001e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e82:	460b      	mov	r3, r1
 8001e84:	18db      	adds	r3, r3, r3
 8001e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e88:	4613      	mov	r3, r2
 8001e8a:	eb42 0303 	adc.w	r3, r2, r3
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e98:	f7fe f9b4 	bl	8000204 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	011c      	lsls	r4, r3, #4
 8001eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ecc:	4641      	mov	r1, r8
 8001ece:	eb12 0a01 	adds.w	sl, r2, r1
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eec:	4692      	mov	sl, r2
 8001eee:	469b      	mov	fp, r3
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001efa:	464b      	mov	r3, r9
 8001efc:	eb4b 0303 	adc.w	r3, fp, r3
 8001f00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	18db      	adds	r3, r3, r3
 8001f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f1e:	4613      	mov	r3, r2
 8001f20:	eb42 0303 	adc.w	r3, r2, r3
 8001f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f2e:	f7fe f969 	bl	8000204 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2264      	movs	r2, #100	@ 0x64
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	1acb      	subs	r3, r1, r3
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f4e:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001f50:	fba3 2302 	umull	r2, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f5c:	441c      	add	r4, r3
 8001f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f62:	2200      	movs	r2, #0
 8001f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f70:	4642      	mov	r2, r8
 8001f72:	464b      	mov	r3, r9
 8001f74:	1891      	adds	r1, r2, r2
 8001f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f78:	415b      	adcs	r3, r3
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f80:	4641      	mov	r1, r8
 8001f82:	1851      	adds	r1, r2, r1
 8001f84:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f86:	4649      	mov	r1, r9
 8001f88:	414b      	adcs	r3, r1
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f98:	4659      	mov	r1, fp
 8001f9a:	00cb      	lsls	r3, r1, #3
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	00ca      	lsls	r2, r1, #3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	4642      	mov	r2, r8
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	eb42 0303 	adc.w	r3, r2, r3
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	18db      	adds	r3, r3, r3
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fda:	4613      	mov	r3, r2
 8001fdc:	eb42 0303 	adc.w	r3, r2, r3
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fea:	f7fe f90b 	bl	8000204 <__aeabi_uldivmod>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	2164      	movs	r1, #100	@ 0x64
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	3332      	adds	r3, #50	@ 0x32
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <UART_SetConfig+0x2d4>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	f003 0207 	and.w	r2, r3, #7
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4422      	add	r2, r4
 800201a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800201c:	e106      	b.n	800222c <UART_SetConfig+0x4d8>
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	40011400 	.word	0x40011400
 8002028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800202c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002036:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800203a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	1891      	adds	r1, r2, r2
 8002044:	6239      	str	r1, [r7, #32]
 8002046:	415b      	adcs	r3, r3
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800204e:	4641      	mov	r1, r8
 8002050:	1854      	adds	r4, r2, r1
 8002052:	4649      	mov	r1, r9
 8002054:	eb43 0501 	adc.w	r5, r3, r1
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	00eb      	lsls	r3, r5, #3
 8002062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002066:	00e2      	lsls	r2, r4, #3
 8002068:	4614      	mov	r4, r2
 800206a:	461d      	mov	r5, r3
 800206c:	4643      	mov	r3, r8
 800206e:	18e3      	adds	r3, r4, r3
 8002070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002074:	464b      	mov	r3, r9
 8002076:	eb45 0303 	adc.w	r3, r5, r3
 800207a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800208a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800209a:	4629      	mov	r1, r5
 800209c:	008b      	lsls	r3, r1, #2
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020a4:	4621      	mov	r1, r4
 80020a6:	008a      	lsls	r2, r1, #2
 80020a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020ac:	f7fe f8aa 	bl	8000204 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <UART_SetConfig+0x4e4>)
 80020b6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	011c      	lsls	r4, r3, #4
 80020be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	1891      	adds	r1, r2, r2
 80020d6:	61b9      	str	r1, [r7, #24]
 80020d8:	415b      	adcs	r3, r3
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e0:	4641      	mov	r1, r8
 80020e2:	1851      	adds	r1, r2, r1
 80020e4:	6139      	str	r1, [r7, #16]
 80020e6:	4649      	mov	r1, r9
 80020e8:	414b      	adcs	r3, r1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f8:	4659      	mov	r1, fp
 80020fa:	00cb      	lsls	r3, r1, #3
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002102:	4651      	mov	r1, sl
 8002104:	00ca      	lsls	r2, r1, #3
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	4603      	mov	r3, r0
 800210c:	4642      	mov	r2, r8
 800210e:	189b      	adds	r3, r3, r2
 8002110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002114:	464b      	mov	r3, r9
 8002116:	460a      	mov	r2, r1
 8002118:	eb42 0303 	adc.w	r3, r2, r3
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800212a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002138:	4649      	mov	r1, r9
 800213a:	008b      	lsls	r3, r1, #2
 800213c:	4641      	mov	r1, r8
 800213e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002142:	4641      	mov	r1, r8
 8002144:	008a      	lsls	r2, r1, #2
 8002146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800214a:	f7fe f85b 	bl	8000204 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4611      	mov	r1, r2
 8002154:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2264      	movs	r2, #100	@ 0x64
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	3332      	adds	r3, #50	@ 0x32
 8002168:	4a33      	ldr	r2, [pc, #204]	@ (8002238 <UART_SetConfig+0x4e4>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002174:	441c      	add	r4, r3
 8002176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800217a:	2200      	movs	r2, #0
 800217c:	673b      	str	r3, [r7, #112]	@ 0x70
 800217e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002184:	4642      	mov	r2, r8
 8002186:	464b      	mov	r3, r9
 8002188:	1891      	adds	r1, r2, r2
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	415b      	adcs	r3, r3
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002194:	4641      	mov	r1, r8
 8002196:	1851      	adds	r1, r2, r1
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	4649      	mov	r1, r9
 800219c:	414b      	adcs	r3, r1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021ac:	4659      	mov	r1, fp
 80021ae:	00cb      	lsls	r3, r1, #3
 80021b0:	4651      	mov	r1, sl
 80021b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b6:	4651      	mov	r1, sl
 80021b8:	00ca      	lsls	r2, r1, #3
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	4642      	mov	r2, r8
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021c6:	464b      	mov	r3, r9
 80021c8:	460a      	mov	r2, r1
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021da:	667a      	str	r2, [r7, #100]	@ 0x64
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021e8:	4649      	mov	r1, r9
 80021ea:	008b      	lsls	r3, r1, #2
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021f2:	4641      	mov	r1, r8
 80021f4:	008a      	lsls	r2, r1, #2
 80021f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021fa:	f7fe f803 	bl	8000204 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002204:	fba3 1302 	umull	r1, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	2164      	movs	r1, #100	@ 0x64
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	3332      	adds	r3, #50	@ 0x32
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4422      	add	r2, r4
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002238:	51eb851f 	.word	0x51eb851f

0800223c <memset>:
 800223c:	4402      	add	r2, r0
 800223e:	4603      	mov	r3, r0
 8002240:	4293      	cmp	r3, r2
 8002242:	d100      	bne.n	8002246 <memset+0xa>
 8002244:	4770      	bx	lr
 8002246:	f803 1b01 	strb.w	r1, [r3], #1
 800224a:	e7f9      	b.n	8002240 <memset+0x4>

0800224c <__libc_init_array>:
 800224c:	b570      	push	{r4, r5, r6, lr}
 800224e:	4d0d      	ldr	r5, [pc, #52]	@ (8002284 <__libc_init_array+0x38>)
 8002250:	4c0d      	ldr	r4, [pc, #52]	@ (8002288 <__libc_init_array+0x3c>)
 8002252:	1b64      	subs	r4, r4, r5
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	2600      	movs	r6, #0
 8002258:	42a6      	cmp	r6, r4
 800225a:	d109      	bne.n	8002270 <__libc_init_array+0x24>
 800225c:	4d0b      	ldr	r5, [pc, #44]	@ (800228c <__libc_init_array+0x40>)
 800225e:	4c0c      	ldr	r4, [pc, #48]	@ (8002290 <__libc_init_array+0x44>)
 8002260:	f000 f818 	bl	8002294 <_init>
 8002264:	1b64      	subs	r4, r4, r5
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	2600      	movs	r6, #0
 800226a:	42a6      	cmp	r6, r4
 800226c:	d105      	bne.n	800227a <__libc_init_array+0x2e>
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	f855 3b04 	ldr.w	r3, [r5], #4
 8002274:	4798      	blx	r3
 8002276:	3601      	adds	r6, #1
 8002278:	e7ee      	b.n	8002258 <__libc_init_array+0xc>
 800227a:	f855 3b04 	ldr.w	r3, [r5], #4
 800227e:	4798      	blx	r3
 8002280:	3601      	adds	r6, #1
 8002282:	e7f2      	b.n	800226a <__libc_init_array+0x1e>
 8002284:	080022e4 	.word	0x080022e4
 8002288:	080022e4 	.word	0x080022e4
 800228c:	080022e4 	.word	0x080022e4
 8002290:	080022e8 	.word	0x080022e8

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
