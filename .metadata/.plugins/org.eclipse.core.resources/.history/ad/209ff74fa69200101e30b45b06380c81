/*
 * API_delay.c
 *
 *  Created on: Sep 15, 2025
 *      Author: Paulo
 */
/*
 *@brief Funcion para cargar valor del retardo no bloqueante.
 *@param delay_t* delay: puntero a struct delay_t.
 *@param tick_t duration: uint32 duración del delay en ms.
 *@retval None
 * */
#include "API_delay.h"

void delayInit(delay_t * delay, tick_t duration)
{
	if(delay == NULL) return;
	delay->duration = duration;
	delay->running = false;
	delay->startTime = (tick_t)(0);
}

/*
 *@brief Función para revisar el tiempo transcurrido del retardo.
 *@param delay_t* delay: puntero a struct delay_t
 *@retval True, si el el tiempo ya se cumplió
 *@retval False, para cualquier otro caso*/
bool_t delayRead(delay_t * delay)
{
	if(!delay->running){
		delay->startTime = (tick_t)(HAL_GetTick());
		delay->running = true;
	}else{
		if(((tick_t)(HAL_GetTick()) - delay->startTime) >= delay->duration){
			delay->running = false;
			return true;
		}
	}

	return false;
}

/*
 *@brief Función para cambiar el valor de la duración del delay
 *@param delay_t* delay: puntero a struct delay_t
 *@param tick_t duration: uint32 duración del delay en ms.
 *@retval None*/
void delayWrite(delay_t * delay, tick_t duration)
{
	delay->duration = duration;
	delay->running = false;
}
